name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']  # Removed 3.8 as it's EOL
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Playwright browsers
      run: playwright install --with-deps
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=tests --cov-report=xml --cov-report=html --html=reports/integration-report.html --self-contained-html
      env:
        CI: true
    
    - name: Run security tests
      run: |
        pytest tests/security/ -v --html=reports/security-report.html --self-contained-html
      env:
        CI: true
    
    - name: Run backend tests
      run: |
        pytest tests/backend/ -v --cov=tests/backend --cov-report=xml --cov-report=html --html=reports/backend-report.html --self-contained-html
      env:
        CI: true
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          reports/
          htmlcov/
          coverage.xml
        retention-days: 30
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    if: always() && needs.test.result != 'cancelled'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.test.result == 'success'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance tests
      run: |
        cd tests/performance
        # Run a quick performance test (30 seconds, 5 users)
        locust -f locustfile.py --host=https://www.saucedemo.com --users 5 --spawn-rate 1 --run-time 30s --headless --html=../../reports/performance-report.html
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-report
        path: reports/performance-report.html
        retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.test.result == 'success'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: github.repository_owner != 'dependabot[bot]'
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.repository_owner != 'dependabot[bot]' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/web-testing-suite:latest
          ${{ secrets.DOCKER_USERNAME }}/web-testing-suite:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan, performance-test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here
    
    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, performance-test, docker-build, deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security-scan.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        # Add notification logic (Slack, email, etc.)
    
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "❌ Tests failed!"
        # Add failure notification logic